facets_by_hash method not ordered - needs to be an array

Look into HashWithIndifferentAccess or Merb's Mash class for response document field access
	
	not sure if accessing fields with dynamic methods is a good idea...

Remove those pesky test warnings about constants already being defined etc.

Is "solr" a good name for this gem?

Look at http://lab.cisti-icist.nrc-cnrc.gc.ca/cistilabswiki/index.php/LuSql

  db_mapper = Solr::DBMapper.new(:host=>'', :database=>'')

Check out http://github.com/dan-manges/mixology/tree/master for extensions/mixins framework?

Check out the following:

http://wiki.apache.org/solr-data/attachments/solr(2d)ruby(2f)BrainStorming/attachments/rich.rb%200.1.3%20-%20Support%20for%20Rich%20Documents
http://wiki.apache.org/solr/solr-ruby/BrainStorming
http://wiki.apache.org/solr/solr-ruby/ToDo

=Param naming style
convert all incoming solr params from :this_style to 'thisStyle'?

  EXAMPLE: solr.query(:debug_query) is sent as 'debugQuery'

convert all solr response params (not docs or schema field names) from 'thisStyle' to :this_style?

  EXAMPLE: response[:num_found]


Add :phrase_filters to search_ext for phrase quoting:
	search('blah', :phrase_filters=>{:title=>'Book One'})
	-> fq=title:"Book One"


Demo app
	
	show faceting, searching + filtering constraints
	indexing
	request/response context output (query, params etc.)
	
	docs.each do |doc|
		doc.extend XMLDocument::Base
			# loads xml file IO into memory if it hasn't already been (memory cache)
			# seeks/loads start/stop as string if it hasn't already been loaded (memory cache)
		book = doc.ancestors.select{|a|a.type=='Book'}
		
	end
	
	indexing:
		parse document and re-create file, store start/stop pos of nodes as attributes
		reload doc into LibXML::XML::Reader w/dsl layer
		index, store start/stop in solr


Push HTTPClient and Mapper into separate gems?

Connection pooling?