=Solr Ruby

A Ruby client for Apache Solr. Has transparent JRuby support by using "org.apache.solr.servlet.DirectSolrConnection" as a connection adapter.

To run tests:
	
	Copy a Solr 1.3.0 (or later) distribution into this directory and rename to "apache-solr"
	Start Solr HTTP: 	rake start_test_server
	MRI Ruby: 			rake
	JRuby: 				jruby -S rake

To get a connection in Ruby:
	
	solr = Solr.connect(:http, wrapper_opts, adapter_opts)

To get a connection in jRuby using DirectSolrConnection:
	
	solr = Solr.connect(:direct, wrapper_opts, adapter_opts)

"wrapper_opts" can be a hash with settings that change the wrapper class; Solr::Connection::Wraper. Valid options are:
	
	:auto_commit - default is false
	:global_params - default is {:wt=>:ruby, :echoParams=>'EXPLICIT'}

"adapter_opts" is a hash that gets sent directly to the adapter class.


== Connection Requests
Once you have an instance of Solr::Connection, you can execute queries, updates etc..


=== Querying
  response = solr.query(:q=>'washington', :facet=>true, :facet.limit=>-1, :facet.field=cat, :facet.field=>inStock)

  response = solr.find_by_id(1)


====Pagination
You can enable pagination methods in the "request" and "response" by using the "extend" method on a solr instance:

  solr.extend Solr::Ext::Pagination
  response = solr.query(:page=>1, :per_page=>10, :q=>'*:*')
  response.per_page
  response.page_count
  response.current_page

===Simplified Querying
There are helper methods available that build-up complex solr queries. The Solr::Ext::Search module adds a "search" method and defaults to the DisMax handler:

  solr.extend Solr::Ext::Search
  response = solr.search 'my search', :filters=>{:price=>(0.00..10.00)}


=== Updating
single document
  response = solr.add(:id=>1, :price=>1.00)
multiple documents
  response = solr.add([{:id=>1, :price=>1.00}, {:id=>2, :price=>10.50}])

delete by id
  response = solr.delete_by_id(1)
or an array of ids
  response = solr.delete_by_id([1, 2, 3, 4])

delete by query:
  response = solr.delete_by_query('price:1.00')
delete by array of queries
  response = solr.delete_by_query(['price:1.00', 'price:10.00'])

commit
  solr.commit

optimize
  solr.optimize

==Response Formats
The default response format is Ruby. When the :wt param is set to :ruby, the response is evaled and wrapped up in a nice Solr::Response class. You can get raw ruby by setting the :wt to "ruby" - notice, the string, not symbol. All other response formats are available as expected, :wt=>'xml' etc.. Currently, the only response format that gets evaled and wrapped is :ruby.